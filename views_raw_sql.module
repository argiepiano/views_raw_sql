<?php

/**
 * Implements hook_permission().
 */
function views_raw_sql_permission() {
  return array(
    'edit views raw sql' => array(
      'title' => t('Add or edit Views raw SQL fields and sorts'),
    ),
  );
}

/**
 * Implements hook_views_api().
 */
function views_raw_sql_views_api() {

  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'views_raw_sql'),
  );

} // views_raw_sql_views_api

/**
 * Implements hook_views_data().
 */
function views_raw_sql_views_data() {

  $data = array();
  $data['views_raw_sql'] = array(
    'table' => array(
      'group' => t('Raw SQL'),
      'join' => array(
        '#global' => array(),
      ),
    ),
  );

  $data['views_raw_sql']['raw_field'] = array(
    'title' => t('Raw field'),
    'help' => t('Provide raw SQL field expression.'),
    'field' => array(
      'handler' => 'views_handler_field_views_raw_sql',
    ),
  );

  $data['views_raw_sql']['raw_sort'] = array(
    'title' => t('Raw sort'),
    'help' => t('Provide raw SQL sort exporession.'),
    'sort' => array(
      'handler' => 'views_handler_sort_views_raw_sql',
    ),
  );

  $data['views_raw_sql']['raw_filter'] = array(
    'title' => t('Raw filter'),
    'help' => t('Provide raw SQL filter exporession.'),
    'filter' => array(
      'handler' => 'views_handler_filter_views_raw_sql',
    ),
  );

  return $data;

} // views_raw_sql_views_data

/**
 * Get query tokens. Nearly straight copy (without self tokens) from \views_handler_field::get_render_tokens().
 *
 * @todo We might want to cache parts of this.
 *
 * @param $view
 * @param $field_id
 *   When this is called from a field, searching after current field id is useless.
 * @return array
 */
function views_raw_sql_get_query_tokens($view, $field_id = NULL) {
  $tokens = array();
  if (!empty($view->build_info['substitutions'])) {
    $tokens = $view->build_info['substitutions'];
  }
  $count = 0;
  foreach ($view->display_handler->get_handlers('argument') as $arg => $handler) {
    $token = '%' . ++$count;
    if (!isset($tokens[$token])) {
      $tokens[$token] = '';
    }

    // Use strip tags as there should never be HTML in the path.
    // However, we need to preserve special characters like " that
    // were removed by check_plain().
    $tokens['!' . $count] = isset($view->args[$count - 1]) ? strip_tags(decode_entities($view->args[$count - 1])) : '';
  }

  // Get flattened set of tokens for any array depth in $_GET parameters.
  $tokens += views_raw_sql_get_query_tokens_recursive($_GET);

  // Now add replacements for our fields.
  foreach ($view->display_handler->get_handlers('field') as $field => $handler) {
    // We only use fields up to (and NOT including) this one.
    if ($field == $field_id) {
      break;
    }

    $tokens["[$field]"] = views_raw_sql_get_field_sql($handler);
  }

  return $tokens;
}

/**
 * Get sql from field. We did this before in views_fieldoperations.
 *
 * @param $handler
 * @return string
 */
function views_raw_sql_get_field_sql($field) {
  // Oh this is hacky, but we need  it...
  if (empty($field->query->fields)) {
    $field->view->_build('field');
  }
  $query_fields = $field->query->fields;
  if (isset($query_fields[$field->field_alias]['field'])) {
    // Use a dirty hack to get sql instead of alias.
    // Because where and orderby are evaluated before aliases are defined.
    $query_field = $query_fields[$field->field_alias];
    $snippet = $query_field['field'];
    if (!empty($query_field['table'])) {
      $snippet = $query_field['table'] . '.' . $snippet;
    }
    return $snippet;
  }
}

/**
 * Get recursive tokens from $_GET value. Straight copy from \views_handler_field::get_token_values_recursive().
 */
function views_raw_sql_get_query_tokens_recursive(array $array, array $parent_keys = array()) {
  $tokens = array();

  foreach ($array as $param => $val) {
    if (is_array($val)) {
      // Copy parent_keys array, so we don't afect other elements of this iteration.
      $child_parent_keys = $parent_keys;
      $child_parent_keys[] = $param;
      // Get the child tokens.
      $child_tokens = views_raw_sql_get_query_tokens_recursive($val, $child_parent_keys);
      // Add them to the current tokens array.
      $tokens += $child_tokens;
    }
    else {
      // Create a token key based on array element structure.
      $token_string = !empty($parent_keys) ? implode('_', $parent_keys) . '_' . $param : $param;
      $tokens['%' . $token_string] = strip_tags(decode_entities($val));
    }
  }

  return $tokens;
}
